# Task ID: 11
# Title: Update Transaction List to Display Currency
# Status: done
# Dependencies: 2, 4
# Priority: medium
# Description: Enhance the transaction list to display currency symbols with amounts and format according to currency conventions.
# Details:
Modify the transaction list UI to display currency symbols with amounts and format the amounts according to currency conventions. This includes handling different decimal places for different currencies.

Implementation details:
1. Update the transaction list item layout to include currency symbol
2. Create a utility function to format amounts based on currency
3. Use the correct number of decimal places for each currency
4. Handle RTL languages for currency display

Code example for amount formatting:
```kotlin
fun formatAmountWithCurrency(amount: Double, currencyCode: String): String {
    val currency = Currency.fromCode(currencyCode) ?: Currency.USD
    val locale = when(currency) {
        Currency.EUR -> Locale.GERMANY
        Currency.GBP -> Locale.UK
        Currency.JPY -> Locale.JAPAN
        else -> Locale.US
    }
    
    val format = NumberFormat.getCurrencyInstance(locale)
    format.currency = java.util.Currency.getInstance(currency.code)
    
    return format.format(amount)
}
```

Use RecyclerView with ListAdapter and DiffUtil for efficient list updates. Implement proper content descriptions for accessibility.

# Test Strategy:
Write UI tests using Espresso to verify that:
1. Currency symbols are displayed correctly with amounts
2. Amounts are formatted according to currency conventions
3. Different decimal places are handled correctly (e.g., JPY with 0 decimals)
4. RTL languages are handled correctly
5. Accessibility testing with TalkBack
6. Test with different currencies and amount formats

# Subtasks:
## 1. Create CurrencyFormatter utility class [done]
### Dependencies: None
### Description: Implement a utility class that handles currency formatting according to different currency conventions, including proper symbol placement, decimal places, and locale-specific formatting.
### Details:
Create a CurrencyFormatter class with methods to format amounts based on currency codes. Implement the formatAmountWithCurrency function from the example, but enhance it to handle all supported currencies. Include support for different decimal places (e.g., JPY with 0, most others with 2) and proper locale selection. Add unit tests to verify formatting for various currencies and amounts.
<info added on 2025-09-05T16:25:41.935Z>
Based on research findings, the CurrencyFormatter class should use Android's built-in NumberFormat.getCurrencyInstance() instead of manual string formatting. This approach provides proper locale-aware formatting with automatic handling of currency symbol placement, thousand separators, decimal precision, and negative amount formatting according to locale conventions.

Implementation should:
1. Replace current manual string formatting in LocaleFormatter.kt with NumberFormat-based approach
2. Use Currency.getInstance() for automatic decimal precision handling
3. Add bidirectional text markers for proper RTL support in mixed-direction contexts
4. Implement locale-specific negative amount formatting
5. Include comprehensive unit tests covering various currencies, locales, and edge cases

The class should integrate with the existing Currency enum and provide methods for both standard currency formatting and currency conversion display.
</info added on 2025-09-05T16:25:41.935Z>

## 2. Update transaction list item layout [done]
### Dependencies: None
### Description: Modify the transaction list item XML layout to include and properly position the currency symbol alongside the amount.
### Details:
Update the transaction_item.xml layout to include a TextView for displaying the formatted amount with currency. Ensure the layout handles both LTR and RTL text directions properly. Add appropriate content descriptions for accessibility. Use ConstraintLayout for flexible positioning of the currency amount relative to other elements in the list item.

## 3. Update TransactionListAdapter to use CurrencyFormatter [done]
### Dependencies: 11.1, 11.2
### Description: Modify the TransactionListAdapter to use the new CurrencyFormatter utility to display properly formatted amounts with currency symbols.
### Details:
Update the onBindViewHolder method in TransactionListAdapter to use the CurrencyFormatter to format transaction amounts. Extract the currency code from each transaction and pass it along with the amount to the formatter. Update the ViewHolder to bind the formatted amount to the appropriate TextView. Ensure proper content descriptions are set for accessibility.
<info added on 2025-09-05T16:29:18.390Z>
Successfully updated transaction list components to use CurrencyFormatter in this Jetpack Compose app. Instead of modifying a RecyclerView adapter as initially planned, I updated all currency formatting in composables including ExpenseSection.kt (TransactionItem), RecurringExpensesSection.kt (RecurringTransactionItem), and MonthlySummaryCard.kt. All LocaleFormatter.formatCurrency() calls were replaced with CurrencyFormatter.formatAmount() while preserving date formatting functionality. The transaction list now correctly displays currency symbols with amounts formatted according to currency conventions using the enhanced CurrencyFormatter utility class.
</info added on 2025-09-05T16:29:18.390Z>

## 4. Implement RTL support for currency display [done]
### Dependencies: 11.3
### Description: Ensure proper display of currency symbols and amounts in right-to-left (RTL) languages and layouts.
### Details:
Modify the CurrencyFormatter to handle RTL languages by detecting the text direction and adjusting the symbol placement accordingly. Update the transaction list item layout with appropriate start/end constraints instead of left/right to support RTL layouts. Test with Arabic and Hebrew locales to ensure correct display. Add support for currencies that have the symbol on the right vs. left side of the amount.
<info added on 2025-09-05T16:31:04.958Z>
Successfully implemented comprehensive RTL support for currency display with the following key enhancements:

**Enhanced CurrencyFormatter with RTL Support:**
1. Added forceRTL parameter to formatAmount() method for explicit RTL control
2. Created formatAmountForRTL() method specifically for RTL formatting with bidirectional markers
3. Added RTL utility methods:
   - isRTLLocale() - detects if a locale is RTL
   - getTextDirection() - returns "rtl" or "ltr" for a locale

**RTL Implementation Details:**
- Uses Unicode bidirectional markers (U+200F Right-to-Left Mark) for proper mixed-direction text display
- Automatically detects RTL locales (Hebrew, Arabic) and applies appropriate formatting
- Supports forced RTL formatting for mixed LTR/RTL contexts
- Handles RTL formatting for all supported currencies (USD, EUR, GBP, ILS, SAR, JPY, etc.)

**Comprehensive Testing:**
- Created CurrencyFormatterRTLTest.kt with extensive RTL test coverage
- Tests Hebrew and Arabic locale support
- Tests bidirectional marker application
- Tests RTL formatting with different currencies, negative amounts, zero amounts, and large amounts
- Tests RTL currency conversion formatting
- Tests RTL-specific symbol retrieval and decimal precision

**UI Integration:**
- The existing Jetpack Compose UI components automatically handle RTL layout direction
- CurrencyFormatter now provides proper RTL-aware currency formatting
- All transaction list components will display currencies correctly in RTL languages
</info added on 2025-09-05T16:31:04.958Z>

## 5. Add DiffUtil implementation for efficient list updates [done]
### Dependencies: 11.3
### Description: Implement DiffUtil with ListAdapter for the transaction list to ensure efficient updates when transaction data changes.
### Details:
Create a TransactionDiffCallback class that extends DiffUtil.ItemCallback<Transaction> to compare transactions based on their IDs and content. Update TransactionListAdapter to extend ListAdapter instead of RecyclerView.Adapter, using the new DiffCallback. Implement proper equals() and hashCode() methods in the Transaction class if not already present. Update the fragment or activity code to use submitList() instead of notifyDataSetChanged() when updating the transaction list.


name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  # Quick validation for PRs - runs only essential tests
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Validate Gradle build
      run: ./gradlew build --dry-run
      
    - name: Run fast unit tests (currency-related only)
      run: ./gradlew testDebugUnitTest --tests "*Currency*Test*" --continue
      
    - name: Check code style
      run: ./gradlew ktlintCheck || echo "Ktlint not configured, skipping..."
      
    - name: Generate test coverage for currency tests
      run: ./gradlew jacocoCurrencyCoverageReport
      
    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read test results if available
          let testResults = 'Test results not available';
          try {
            const testReportPath = 'app/build/reports/tests/testDebugUnitTest/index.html';
            if (fs.existsSync(testReportPath)) {
              testResults = '‚úÖ Currency unit tests completed';
            }
          } catch (error) {
            testResults = '‚ùå Test execution failed';
          }
          
          // Read coverage results if available
          let coverageResults = 'Coverage results not available';
          try {
            const coverageReportPath = 'app/build/reports/jacoco/jacocoCurrencyCoverageReport/index.html';
            if (fs.existsSync(coverageReportPath)) {
              coverageResults = '‚úÖ Currency test coverage report generated';
            }
          } catch (error) {
            coverageResults = '‚ùå Coverage report generation failed';
          }
          
          const comment = `## üß™ PR Validation Results
          
          **Test Status:** ${testResults}
          **Coverage Status:** ${coverageResults}
          
          This is a quick validation run. Full CI/CD pipeline will run after merge.
          
          ---
          *Generated by GitHub Actions*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  # Quick validation for PRs - runs only essential tests
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Check Java and Gradle configuration
      run: |
        echo "Java version:"
        java -version
        echo "Gradle version:"
        ./gradlew --version
        echo "Available tasks:"
        ./gradlew tasks --all | grep -E "(test|jacoco)" || echo "No test/jacoco tasks found"
      
    - name: Run test configuration verification
      run: ./gradlew testDebugUnitTest --tests "*TestConfigurationTest*" --stacktrace --info
      continue-on-error: false
      
    - name: Check for common test issues
      run: |
        echo "Checking for common test issues..."
        # Check if test classes exist
        if [ -d "app/src/test" ]; then
          echo "‚úÖ Test source directory exists"
          test_count=$(find app/src/test -name "*Test*.kt" | wc -l)
          echo "Found $test_count test files"
        else
          echo "‚ùå Test source directory not found"
          exit 1
        fi
        
        # Check if test dependencies are available
        if [ -f "app/build.gradle.kts" ]; then
          echo "‚úÖ Build file exists"
        else
          echo "‚ùå Build file not found"
          exit 1
        fi
      
    - name: Validate Gradle build
      run: ./gradlew build --dry-run
      
    - name: Run fast unit tests (currency-related only)
      run: ./gradlew testDebugUnitTest --tests "*Currency*Test*" --continue --stacktrace --info
      continue-on-error: false
      
    - name: Check test results
      run: |
        if [ -f "app/build/reports/tests/testDebugUnitTest/index.html" ]; then
          echo "‚úÖ Currency test reports generated successfully"
          # Check for test failures in the report
          if grep -q "FAILED" app/build/reports/tests/testDebugUnitTest/index.html; then
            echo "‚ùå Some currency tests failed - check the test report"
            exit 1
          else
            echo "‚úÖ All currency tests passed"
          fi
        else
          echo "‚ùå Currency test reports not found - tests may have failed"
          exit 1
        fi
      
    - name: Check code style
      run: ./gradlew ktlintCheck || echo "Ktlint not configured, skipping..."
      
    - name: Generate test coverage for currency tests
      run: ./gradlew jacocoCurrencyCoverageReport --stacktrace
      continue-on-error: false
      
    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read test results if available
          let testResults = 'Test results not available';
          try {
            const testReportPath = 'app/build/reports/tests/testDebugUnitTest/index.html';
            if (fs.existsSync(testReportPath)) {
              testResults = '‚úÖ Currency unit tests completed';
            }
          } catch (error) {
            testResults = '‚ùå Test execution failed';
          }
          
          // Read coverage results if available
          let coverageResults = 'Coverage results not available';
          try {
            const coverageReportPath = 'app/build/reports/jacoco/jacocoCurrencyCoverageReport/index.html';
            if (fs.existsSync(coverageReportPath)) {
              coverageResults = '‚úÖ Currency test coverage report generated';
            }
          } catch (error) {
            coverageResults = '‚ùå Coverage report generation failed';
          }
          
          const comment = `## üß™ PR Validation Results
          
          **Test Status:** ${testResults}
          **Coverage Status:** ${coverageResults}
          
          This is a quick validation run. Full CI/CD pipeline will run after merge.
          
          ---
          *Generated by GitHub Actions*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
